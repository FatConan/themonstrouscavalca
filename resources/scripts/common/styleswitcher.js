import "jquery";import {BaseClass} from "malicacid";class Styles extends BaseClass{    constructor(linkList){        super();        this.linkMap = new Map();        this.titleList = [];        this.loaderStyle = null;        this._current = null;        this.process(linkList);    }    process(links){        for(const link of links){            if(this.elementHelper.match(link, "link[data-switcher=true]")){                this.add(link);            }else if(this.elementHelper.match(link, "link[data-loader=true")){                this.loaderStyle = link;            }        }    }    has(title){        return this.linkMap.has(title);    }    add(link){        let title = link.getAttribute("title");        this.linkMap.set(title, link);        this.titleList.push(title);        if(link.getAttribute("rel").indexOf("alternate") === -1){            this._current = title;            link.disabled = false;        }else{            link.disabled = true;        }    }    loading(){        for(const link of this.linkMap.values()){            link.disabled = true;            link.setAttribute("rel", "alternate stylesheet");        }        this.loaderStyle.disabled = false;    }    activate(title){        for(const [t, link] of this.linkMap.entries()){            if(t === title){                link.disabled = false;                link.setAttribute("rel", "stylesheet");            }else{                link.disabled = true;                link.setAttribute("rel", "alternate stylesheet");            }        }        this.loaderStyle.disabled = true;        this._current = title;    }    next(title){        let index = this.titleList.indexOf(title);        if(index >= 0){            let nextIndex = (index + 1) % this.titleList.length;            return this.titleList.at(nextIndex);        }        return this.titleList[0];    }    current(){        return this._current;    }}export default class StyleSwitcher extends BaseClass{    constructor(){        super();        this.styles = new Styles(document.getElementsByTagName("link"));        this.sessionStore = null;        if(typeof (Storage) !== "undefined"){            this.sessionStore = window.sessionStorage;        }        this.setActiveStyleSheet(this.loadStyle());        let nextTitle = this.styles.next(this.styles.current());        const switcher = $("nav .styler a");        switcher.prop("title", `Style Switcher - Next up: "${nextTitle}"`);        switcher.attr("data-style", nextTitle);        this.addListeners();    }    saveStyle(title){        if(this.sessionStore){            this.sessionStore.style = title;        }    }    loadStyle(){        if(this.sessionStore && this.sessionStore.style && this.styles.has(this.sessionStore.style)){            return this.sessionStore.style;        }        return this.styles.current();    }    setActiveStyleSheet(title){        this.styles.activate(title);        this.saveStyle(title);    }    addListeners(){         this.eventHandler.addListener("nav .styler a", (e, args) => {            e.preventDefault();            this.styles.loading();            let selectedStyle = args.$matchedEl.attr("data-style");            this.setActiveStyleSheet(selectedStyle);            let nextTitle = this.styles.next(selectedStyle);            args.$matchedEl.prop("title", `Style Switcher - Next up: "${nextTitle}"`);            args.$matchedEl.attr("data-style", nextTitle);        });    }}